
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lcvebyrtauwjfvpytdyk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxjdmVieXJ0YXV3amZ2cHl0ZHlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE0NjAzOTksImV4cCI6MjA1NzAzNjM5OX0.XfBfMgK6suHLa4EqEYF_P5h6GHoIgc6IzKRzVrnjg8Q";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined,
  }
});

// Helper function to handle Supabase errors more gracefully
export const handleSupabaseError = (error: any) => {
  console.error('Supabase Error:', error);
  
  // Return a user-friendly error message
  return {
    message: error?.message || 'An unexpected error occurred',
    status: error?.status || 500,
    details: error?.details || null
  };
};

// Helper function to ensure storage bucket exists
export const ensureStorageBucket = async (bucketName: string) => {
  try {
    // Check if bucket exists
    const { data, error } = await supabase.storage.getBucket(bucketName);
    
    // If bucket doesn't exist, create it
    if (error && error.message.includes('does not exist')) {
      const { data: newBucket, error: createError } = await supabase.storage
        .createBucket(bucketName, { public: true });
        
      if (createError) {
        console.error('Error creating bucket:', createError);
        return false;
      }
      
      console.log(`Bucket ${bucketName} created successfully`);
      return true;
    }
    
    return true;
  } catch (error) {
    console.error('Error ensuring bucket exists:', error);
    return false;
  }
};

// Helper function to create an artist if not exists (should be rare due to trigger)
export const ensureArtistExists = async (userId: string) => {
  try {
    // Check if artist exists
    const { data: existingArtist, error: checkError } = await supabase
      .from('artists')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (checkError || !existingArtist) {
      // Get user data
      const { data: userData } = await supabase.auth.getUser();
      const user = userData.user;
      
      if (!user) return false;
      
      // Create artist record
      const { error: createError } = await supabase
        .from('artists')
        .insert({
          id: userId,
          name: user.user_metadata?.full_name || user.email || 'Artist',
          bio: 'No bio yet',
          location: 'Unknown',
          specialty: 'Digital Art',
          photo: `https://ui-avatars.com/api/?name=${encodeURIComponent(user.user_metadata?.full_name || 'Artist')}&background=random`
        });
        
      if (createError) {
        console.error('Error creating artist:', createError);
        return false;
      }
      
      return true;
    }
    
    return true;
  } catch (error) {
    console.error('Error ensuring artist exists:', error);
    return false;
  }
};

// Helper function for managing collections
export const collectionsService = {
  // Get all collections for the current user
  async getUserCollections() {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session) {
      return { data: null, error: { message: 'User not authenticated' } };
    }
    
    return await supabase
      .from('collections')
      .select('*, collection_items(*, artworks(*))')
      .order('created_at', { ascending: false });
  },
  
  // Create a new collection
  async createCollection(name: string, description: string = '', coverImage: string = '') {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session) {
      return { data: null, error: { message: 'User not authenticated' } };
    }
    
    return await supabase
      .from('collections')
      .insert({
        name,
        description,
        cover_image: coverImage,
        user_id: session.session.user.id
      })
      .select()
      .single();
  },
  
  // Update a collection
  async updateCollection(id: string, updates: { name?: string, description?: string, cover_image?: string }) {
    return await supabase
      .from('collections')
      .update(updates)
      .eq('id', id)
      .select()
      .single();
  },
  
  // Delete a collection
  async deleteCollection(id: string) {
    return await supabase
      .from('collections')
      .delete()
      .eq('id', id);
  },
  
  // Add artwork to collection
  async addArtworkToCollection(collectionId: string, artworkId: string) {
    return await supabase
      .from('collection_items')
      .insert({
        collection_id: collectionId,
        artwork_id: artworkId
      })
      .select();
  },
  
  // Remove artwork from collection
  async removeArtworkFromCollection(collectionId: string, artworkId: string) {
    return await supabase
      .from('collection_items')
      .delete()
      .match({
        collection_id: collectionId,
        artwork_id: artworkId
      });
  },
  
  // Get artwork details for a collection
  async getCollectionArtworks(collectionId: string) {
    return await supabase
      .from('collection_items')
      .select('*, artworks(*)')
      .eq('collection_id', collectionId);
  }
};

