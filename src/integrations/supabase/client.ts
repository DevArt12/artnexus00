
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wjgnwajhqbidekihjswv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndqZ253YWpocWJpZGVraWhqc3d2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4NTU2NjQsImV4cCI6MjA1OTQzMTY2NH0.KDfXKXSMijMoC51URY9yIN2O2RWL4LyExhxShnrtAtY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Ensures that a specific storage bucket exists
 * @param bucketName The name of the bucket to check/create
 * @returns Boolean indicating if the bucket exists or was created successfully
 */
export const ensureStorageBucket = async (bucketName: string): Promise<boolean> => {
  try {
    // First check if the bucket exists
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error("Error checking buckets:", listError);
      return false;
    }
    
    // If bucket already exists, return true
    if (buckets.some(bucket => bucket.name === bucketName)) {
      console.log(`Bucket ${bucketName} already exists`);
      return true;
    }
    
    // If bucket doesn't exist, create it
    const { data, error: createError } = await supabase.storage.createBucket(bucketName, {
      public: true,
      fileSizeLimit: 10485760, // 10MB in bytes
    });
    
    if (createError) {
      console.error(`Error creating bucket ${bucketName}:`, createError);
      return false;
    }
    
    console.log(`Successfully created bucket ${bucketName}`);
    return true;
  } catch (error) {
    console.error(`Unexpected error ensuring bucket ${bucketName}:`, error);
    return false;
  }
};

/**
 * Ensures an artist record exists for the current user
 * @param userId The ID of the user to check/create artist record for
 * @returns Boolean indicating if the artist exists or was created successfully
 */
export const ensureArtistExists = async (userId: string): Promise<boolean> => {
  try {
    // First check if artist already exists
    const { data: existingArtist, error: checkError } = await supabase
      .from('artists')
      .select('id')
      .eq('id', userId)
      .single();
    
    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 is "no rows returned" error
      console.error("Error checking for existing artist:", checkError);
      return false;
    }
    
    // If artist already exists, return true
    if (existingArtist) {
      console.log(`Artist record for user ${userId} already exists`);
      return true;
    }
    
    // Look up user profile information
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (profileError) {
      console.error("Error fetching user profile:", profileError);
      // Continue anyway - we'll create artist with minimal info
    }
    
    // Create new artist record
    const { error: insertError } = await supabase
      .from('artists')
      .insert({
        id: userId,
        name: profile?.username || 'Artist',
        bio: profile?.bio || '',
        location: profile?.location || '',
        photo: profile?.avatar || '',
        verified: false
      });
    
    if (insertError) {
      console.error("Error creating artist record:", insertError);
      return false;
    }
    
    console.log(`Successfully created artist record for user ${userId}`);
    return true;
  } catch (error) {
    console.error(`Unexpected error ensuring artist exists for ${userId}:`, error);
    return false;
  }
};

/**
 * Helper function to handle Supabase errors consistently
 * @param error The error object from Supabase
 * @param fallbackMessage A fallback message to display if the error doesn't have a message
 * @returns A user-friendly error message
 */
export const handleSupabaseError = (error: any, fallbackMessage = 'An unexpected error occurred'): string => {
  if (!error) return fallbackMessage;
  
  // Check if it's a Supabase error with message
  if (error.message) return error.message;
  
  // Check if it's a Supabase error with details
  if (error.details) return error.details;
  
  // Check if it has an error property (might be nested)
  if (error.error?.message) return error.error.message;
  
  // Return fallback message if all else fails
  return fallbackMessage;
};

/**
 * Service for handling collections-related operations
 */
export const collectionsService = {
  /**
   * Add an artwork to a collection
   */
  addToCollection: async (userId: string, collectionId: string, artworkId: string) => {
    const { error } = await supabase
      .from('collection_items')
      .insert({ collection_id: collectionId, artwork_id: artworkId });
    
    return { error };
  },
  
  /**
   * Remove an artwork from a collection
   */
  removeFromCollection: async (collectionId: string, artworkId: string) => {
    const { error } = await supabase
      .from('collection_items')
      .delete()
      .match({ collection_id: collectionId, artwork_id: artworkId });
    
    return { error };
  }
};
